// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/pivotal-cf/kiln/commands"
	"github.com/pivotal-cf/kiln/internal/cargo"
)

type Downloader struct {
	DownloadReleasesStub        func(string, cargo.CompiledReleases, map[cargo.CompiledRelease]string, int) error
	downloadReleasesMutex       sync.RWMutex
	downloadReleasesArgsForCall []struct {
		arg1 string
		arg2 cargo.CompiledReleases
		arg3 map[cargo.CompiledRelease]string
		arg4 int
	}
	downloadReleasesReturns struct {
		result1 error
	}
	downloadReleasesReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Downloader) DownloadReleases(arg1 string, arg2 cargo.CompiledReleases, arg3 map[cargo.CompiledRelease]string, arg4 int) error {
	fake.downloadReleasesMutex.Lock()
	ret, specificReturn := fake.downloadReleasesReturnsOnCall[len(fake.downloadReleasesArgsForCall)]
	fake.downloadReleasesArgsForCall = append(fake.downloadReleasesArgsForCall, struct {
		arg1 string
		arg2 cargo.CompiledReleases
		arg3 map[cargo.CompiledRelease]string
		arg4 int
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("DownloadReleases", []interface{}{arg1, arg2, arg3, arg4})
	fake.downloadReleasesMutex.Unlock()
	if fake.DownloadReleasesStub != nil {
		return fake.DownloadReleasesStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.downloadReleasesReturns
	return fakeReturns.result1
}

func (fake *Downloader) DownloadReleasesCallCount() int {
	fake.downloadReleasesMutex.RLock()
	defer fake.downloadReleasesMutex.RUnlock()
	return len(fake.downloadReleasesArgsForCall)
}

func (fake *Downloader) DownloadReleasesCalls(stub func(string, cargo.CompiledReleases, map[cargo.CompiledRelease]string, int) error) {
	fake.downloadReleasesMutex.Lock()
	defer fake.downloadReleasesMutex.Unlock()
	fake.DownloadReleasesStub = stub
}

func (fake *Downloader) DownloadReleasesArgsForCall(i int) (string, cargo.CompiledReleases, map[cargo.CompiledRelease]string, int) {
	fake.downloadReleasesMutex.RLock()
	defer fake.downloadReleasesMutex.RUnlock()
	argsForCall := fake.downloadReleasesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *Downloader) DownloadReleasesReturns(result1 error) {
	fake.downloadReleasesMutex.Lock()
	defer fake.downloadReleasesMutex.Unlock()
	fake.DownloadReleasesStub = nil
	fake.downloadReleasesReturns = struct {
		result1 error
	}{result1}
}

func (fake *Downloader) DownloadReleasesReturnsOnCall(i int, result1 error) {
	fake.downloadReleasesMutex.Lock()
	defer fake.downloadReleasesMutex.Unlock()
	fake.DownloadReleasesStub = nil
	if fake.downloadReleasesReturnsOnCall == nil {
		fake.downloadReleasesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.downloadReleasesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Downloader) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.downloadReleasesMutex.RLock()
	defer fake.downloadReleasesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Downloader) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commands.Downloader = new(Downloader)
