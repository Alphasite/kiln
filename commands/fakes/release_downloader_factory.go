// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"log"
	"sync"

	"github.com/pivotal-cf/kiln/commands"
	"github.com/pivotal-cf/kiln/internal/cargo"
)

type ReleaseDownloaderFactory struct {
	ReleaseDownloaderStub        func(*log.Logger, cargo.Kilnfile, bool) (commands.ReleaseDownloader, error)
	releaseDownloaderMutex       sync.RWMutex
	releaseDownloaderArgsForCall []struct {
		arg1 *log.Logger
		arg2 cargo.Kilnfile
		arg3 bool
	}
	releaseDownloaderReturns struct {
		result1 commands.ReleaseDownloader
		result2 error
	}
	releaseDownloaderReturnsOnCall map[int]struct {
		result1 commands.ReleaseDownloader
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ReleaseDownloaderFactory) ReleaseDownloader(arg1 *log.Logger, arg2 cargo.Kilnfile, arg3 bool) (commands.ReleaseDownloader, error) {
	fake.releaseDownloaderMutex.Lock()
	ret, specificReturn := fake.releaseDownloaderReturnsOnCall[len(fake.releaseDownloaderArgsForCall)]
	fake.releaseDownloaderArgsForCall = append(fake.releaseDownloaderArgsForCall, struct {
		arg1 *log.Logger
		arg2 cargo.Kilnfile
		arg3 bool
	}{arg1, arg2, arg3})
	fake.recordInvocation("ReleaseDownloader", []interface{}{arg1, arg2, arg3})
	fake.releaseDownloaderMutex.Unlock()
	if fake.ReleaseDownloaderStub != nil {
		return fake.ReleaseDownloaderStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.releaseDownloaderReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ReleaseDownloaderFactory) ReleaseDownloaderCallCount() int {
	fake.releaseDownloaderMutex.RLock()
	defer fake.releaseDownloaderMutex.RUnlock()
	return len(fake.releaseDownloaderArgsForCall)
}

func (fake *ReleaseDownloaderFactory) ReleaseDownloaderCalls(stub func(*log.Logger, cargo.Kilnfile, bool) (commands.ReleaseDownloader, error)) {
	fake.releaseDownloaderMutex.Lock()
	defer fake.releaseDownloaderMutex.Unlock()
	fake.ReleaseDownloaderStub = stub
}

func (fake *ReleaseDownloaderFactory) ReleaseDownloaderArgsForCall(i int) (*log.Logger, cargo.Kilnfile, bool) {
	fake.releaseDownloaderMutex.RLock()
	defer fake.releaseDownloaderMutex.RUnlock()
	argsForCall := fake.releaseDownloaderArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *ReleaseDownloaderFactory) ReleaseDownloaderReturns(result1 commands.ReleaseDownloader, result2 error) {
	fake.releaseDownloaderMutex.Lock()
	defer fake.releaseDownloaderMutex.Unlock()
	fake.ReleaseDownloaderStub = nil
	fake.releaseDownloaderReturns = struct {
		result1 commands.ReleaseDownloader
		result2 error
	}{result1, result2}
}

func (fake *ReleaseDownloaderFactory) ReleaseDownloaderReturnsOnCall(i int, result1 commands.ReleaseDownloader, result2 error) {
	fake.releaseDownloaderMutex.Lock()
	defer fake.releaseDownloaderMutex.Unlock()
	fake.ReleaseDownloaderStub = nil
	if fake.releaseDownloaderReturnsOnCall == nil {
		fake.releaseDownloaderReturnsOnCall = make(map[int]struct {
			result1 commands.ReleaseDownloader
			result2 error
		})
	}
	fake.releaseDownloaderReturnsOnCall[i] = struct {
		result1 commands.ReleaseDownloader
		result2 error
	}{result1, result2}
}

func (fake *ReleaseDownloaderFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.releaseDownloaderMutex.RLock()
	defer fake.releaseDownloaderMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ReleaseDownloaderFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commands.ReleaseDownloaderFactory = new(ReleaseDownloaderFactory)
