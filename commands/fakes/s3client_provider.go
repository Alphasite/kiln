// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/s3/s3iface"
	"github.com/pivotal-cf/kiln/commands"
)

type S3ClientProvider struct {
	GetStub        func(*session.Session, ...*aws.Config) s3iface.S3API
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 *session.Session
		arg2 []*aws.Config
	}
	getReturns struct {
		result1 s3iface.S3API
	}
	getReturnsOnCall map[int]struct {
		result1 s3iface.S3API
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *S3ClientProvider) Get(arg1 *session.Session, arg2 ...*aws.Config) s3iface.S3API {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 *session.Session
		arg2 []*aws.Config
	}{arg1, arg2})
	fake.recordInvocation("Get", []interface{}{arg1, arg2})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getReturns
	return fakeReturns.result1
}

func (fake *S3ClientProvider) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *S3ClientProvider) GetCalls(stub func(*session.Session, ...*aws.Config) s3iface.S3API) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *S3ClientProvider) GetArgsForCall(i int) (*session.Session, []*aws.Config) {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *S3ClientProvider) GetReturns(result1 s3iface.S3API) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 s3iface.S3API
	}{result1}
}

func (fake *S3ClientProvider) GetReturnsOnCall(i int, result1 s3iface.S3API) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 s3iface.S3API
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 s3iface.S3API
	}{result1}
}

func (fake *S3ClientProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *S3ClientProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commands.S3ClientProvider = new(S3ClientProvider)
