// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/pivotal-cf/kiln/commands"
	"github.com/pivotal-cf/kiln/fetcher"
	"github.com/pivotal-cf/kiln/internal/cargo"
)

type ReleaseUploaderFactory struct {
	ReleaseUploaderStub        func(string, cargo.Kilnfile) (fetcher.ReleaseUploader, error)
	releaseUploaderMutex       sync.RWMutex
	releaseUploaderArgsForCall []struct {
		arg1 string
		arg2 cargo.Kilnfile
	}
	releaseUploaderReturns struct {
		result1 fetcher.ReleaseUploader
		result2 error
	}
	releaseUploaderReturnsOnCall map[int]struct {
		result1 fetcher.ReleaseUploader
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ReleaseUploaderFactory) ReleaseUploader(arg1 string, arg2 cargo.Kilnfile) (fetcher.ReleaseUploader, error) {
	fake.releaseUploaderMutex.Lock()
	ret, specificReturn := fake.releaseUploaderReturnsOnCall[len(fake.releaseUploaderArgsForCall)]
	fake.releaseUploaderArgsForCall = append(fake.releaseUploaderArgsForCall, struct {
		arg1 string
		arg2 cargo.Kilnfile
	}{arg1, arg2})
	fake.recordInvocation("ReleaseUploader", []interface{}{arg1, arg2})
	fake.releaseUploaderMutex.Unlock()
	if fake.ReleaseUploaderStub != nil {
		return fake.ReleaseUploaderStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.releaseUploaderReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ReleaseUploaderFactory) ReleaseUploaderCallCount() int {
	fake.releaseUploaderMutex.RLock()
	defer fake.releaseUploaderMutex.RUnlock()
	return len(fake.releaseUploaderArgsForCall)
}

func (fake *ReleaseUploaderFactory) ReleaseUploaderCalls(stub func(string, cargo.Kilnfile) (fetcher.ReleaseUploader, error)) {
	fake.releaseUploaderMutex.Lock()
	defer fake.releaseUploaderMutex.Unlock()
	fake.ReleaseUploaderStub = stub
}

func (fake *ReleaseUploaderFactory) ReleaseUploaderArgsForCall(i int) (string, cargo.Kilnfile) {
	fake.releaseUploaderMutex.RLock()
	defer fake.releaseUploaderMutex.RUnlock()
	argsForCall := fake.releaseUploaderArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ReleaseUploaderFactory) ReleaseUploaderReturns(result1 fetcher.ReleaseUploader, result2 error) {
	fake.releaseUploaderMutex.Lock()
	defer fake.releaseUploaderMutex.Unlock()
	fake.ReleaseUploaderStub = nil
	fake.releaseUploaderReturns = struct {
		result1 fetcher.ReleaseUploader
		result2 error
	}{result1, result2}
}

func (fake *ReleaseUploaderFactory) ReleaseUploaderReturnsOnCall(i int, result1 fetcher.ReleaseUploader, result2 error) {
	fake.releaseUploaderMutex.Lock()
	defer fake.releaseUploaderMutex.Unlock()
	fake.ReleaseUploaderStub = nil
	if fake.releaseUploaderReturnsOnCall == nil {
		fake.releaseUploaderReturnsOnCall = make(map[int]struct {
			result1 fetcher.ReleaseUploader
			result2 error
		})
	}
	fake.releaseUploaderReturnsOnCall[i] = struct {
		result1 fetcher.ReleaseUploader
		result2 error
	}{result1, result2}
}

func (fake *ReleaseUploaderFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.releaseUploaderMutex.RLock()
	defer fake.releaseUploaderMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ReleaseUploaderFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commands.ReleaseUploaderFactory = new(ReleaseUploaderFactory)
