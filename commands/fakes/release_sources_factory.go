// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/pivotal-cf/kiln/commands"
	"github.com/pivotal-cf/kiln/fetcher"
	"github.com/pivotal-cf/kiln/internal/cargo"
)

type ReleaseSourcesFactory struct {
	ReleaseSourcesStub        func(cargo.Assets) []fetcher.ReleaseSource
	releaseSourcesMutex       sync.RWMutex
	releaseSourcesArgsForCall []struct {
		arg1 cargo.Assets
	}
	releaseSourcesReturns struct {
		result1 []fetcher.ReleaseSource
	}
	releaseSourcesReturnsOnCall map[int]struct {
		result1 []fetcher.ReleaseSource
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ReleaseSourcesFactory) ReleaseSources(arg1 cargo.Assets) []fetcher.ReleaseSource {
	fake.releaseSourcesMutex.Lock()
	ret, specificReturn := fake.releaseSourcesReturnsOnCall[len(fake.releaseSourcesArgsForCall)]
	fake.releaseSourcesArgsForCall = append(fake.releaseSourcesArgsForCall, struct {
		arg1 cargo.Assets
	}{arg1})
	fake.recordInvocation("ReleaseSources", []interface{}{arg1})
	fake.releaseSourcesMutex.Unlock()
	if fake.ReleaseSourcesStub != nil {
		return fake.ReleaseSourcesStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.releaseSourcesReturns
	return fakeReturns.result1
}

func (fake *ReleaseSourcesFactory) ReleaseSourcesCallCount() int {
	fake.releaseSourcesMutex.RLock()
	defer fake.releaseSourcesMutex.RUnlock()
	return len(fake.releaseSourcesArgsForCall)
}

func (fake *ReleaseSourcesFactory) ReleaseSourcesCalls(stub func(cargo.Assets) []fetcher.ReleaseSource) {
	fake.releaseSourcesMutex.Lock()
	defer fake.releaseSourcesMutex.Unlock()
	fake.ReleaseSourcesStub = stub
}

func (fake *ReleaseSourcesFactory) ReleaseSourcesArgsForCall(i int) cargo.Assets {
	fake.releaseSourcesMutex.RLock()
	defer fake.releaseSourcesMutex.RUnlock()
	argsForCall := fake.releaseSourcesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ReleaseSourcesFactory) ReleaseSourcesReturns(result1 []fetcher.ReleaseSource) {
	fake.releaseSourcesMutex.Lock()
	defer fake.releaseSourcesMutex.Unlock()
	fake.ReleaseSourcesStub = nil
	fake.releaseSourcesReturns = struct {
		result1 []fetcher.ReleaseSource
	}{result1}
}

func (fake *ReleaseSourcesFactory) ReleaseSourcesReturnsOnCall(i int, result1 []fetcher.ReleaseSource) {
	fake.releaseSourcesMutex.Lock()
	defer fake.releaseSourcesMutex.Unlock()
	fake.ReleaseSourcesStub = nil
	if fake.releaseSourcesReturnsOnCall == nil {
		fake.releaseSourcesReturnsOnCall = make(map[int]struct {
			result1 []fetcher.ReleaseSource
		})
	}
	fake.releaseSourcesReturnsOnCall[i] = struct {
		result1 []fetcher.ReleaseSource
	}{result1}
}

func (fake *ReleaseSourcesFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.releaseSourcesMutex.RLock()
	defer fake.releaseSourcesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ReleaseSourcesFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commands.ReleaseSourcesFactory = new(ReleaseSourcesFactory)
