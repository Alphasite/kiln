// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/pivotal-cf/kiln/commands"
	"github.com/pivotal-cf/kiln/fetcher"
	"github.com/pivotal-cf/kiln/internal/cargo"
)

type ReleaseSourceFactory struct {
	ReleaseSourceStub        func(cargo.Kilnfile, bool) fetcher.ReleaseSource
	releaseSourceMutex       sync.RWMutex
	releaseSourceArgsForCall []struct {
		arg1 cargo.Kilnfile
		arg2 bool
	}
	releaseSourceReturns struct {
		result1 fetcher.ReleaseSource
	}
	releaseSourceReturnsOnCall map[int]struct {
		result1 fetcher.ReleaseSource
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ReleaseSourceFactory) ReleaseSource(arg1 cargo.Kilnfile, arg2 bool) fetcher.ReleaseSource {
	fake.releaseSourceMutex.Lock()
	ret, specificReturn := fake.releaseSourceReturnsOnCall[len(fake.releaseSourceArgsForCall)]
	fake.releaseSourceArgsForCall = append(fake.releaseSourceArgsForCall, struct {
		arg1 cargo.Kilnfile
		arg2 bool
	}{arg1, arg2})
	fake.recordInvocation("ReleaseSource", []interface{}{arg1, arg2})
	fake.releaseSourceMutex.Unlock()
	if fake.ReleaseSourceStub != nil {
		return fake.ReleaseSourceStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.releaseSourceReturns
	return fakeReturns.result1
}

func (fake *ReleaseSourceFactory) ReleaseSourceCallCount() int {
	fake.releaseSourceMutex.RLock()
	defer fake.releaseSourceMutex.RUnlock()
	return len(fake.releaseSourceArgsForCall)
}

func (fake *ReleaseSourceFactory) ReleaseSourceCalls(stub func(cargo.Kilnfile, bool) fetcher.ReleaseSource) {
	fake.releaseSourceMutex.Lock()
	defer fake.releaseSourceMutex.Unlock()
	fake.ReleaseSourceStub = stub
}

func (fake *ReleaseSourceFactory) ReleaseSourceArgsForCall(i int) (cargo.Kilnfile, bool) {
	fake.releaseSourceMutex.RLock()
	defer fake.releaseSourceMutex.RUnlock()
	argsForCall := fake.releaseSourceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ReleaseSourceFactory) ReleaseSourceReturns(result1 fetcher.ReleaseSource) {
	fake.releaseSourceMutex.Lock()
	defer fake.releaseSourceMutex.Unlock()
	fake.ReleaseSourceStub = nil
	fake.releaseSourceReturns = struct {
		result1 fetcher.ReleaseSource
	}{result1}
}

func (fake *ReleaseSourceFactory) ReleaseSourceReturnsOnCall(i int, result1 fetcher.ReleaseSource) {
	fake.releaseSourceMutex.Lock()
	defer fake.releaseSourceMutex.Unlock()
	fake.ReleaseSourceStub = nil
	if fake.releaseSourceReturnsOnCall == nil {
		fake.releaseSourceReturnsOnCall = make(map[int]struct {
			result1 fetcher.ReleaseSource
		})
	}
	fake.releaseSourceReturnsOnCall[i] = struct {
		result1 fetcher.ReleaseSource
	}{result1}
}

func (fake *ReleaseSourceFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.releaseSourceMutex.RLock()
	defer fake.releaseSourceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ReleaseSourceFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commands.ReleaseSourceFactory = new(ReleaseSourceFactory)
