// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"
)

type TemplateVariablesParser struct {
	ExecuteStub        func(paths []string, pairs []string) (variables map[string]interface{}, err error)
	executeMutex       sync.RWMutex
	executeArgsForCall []struct {
		paths []string
		pairs []string
	}
	executeReturns struct {
		result1 map[string]interface{}
		result2 error
	}
	executeReturnsOnCall map[int]struct {
		result1 map[string]interface{}
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *TemplateVariablesParser) Execute(paths []string, pairs []string) (variables map[string]interface{}, err error) {
	var pathsCopy []string
	if paths != nil {
		pathsCopy = make([]string, len(paths))
		copy(pathsCopy, paths)
	}
	var pairsCopy []string
	if pairs != nil {
		pairsCopy = make([]string, len(pairs))
		copy(pairsCopy, pairs)
	}
	fake.executeMutex.Lock()
	ret, specificReturn := fake.executeReturnsOnCall[len(fake.executeArgsForCall)]
	fake.executeArgsForCall = append(fake.executeArgsForCall, struct {
		paths []string
		pairs []string
	}{pathsCopy, pairsCopy})
	fake.recordInvocation("Execute", []interface{}{pathsCopy, pairsCopy})
	fake.executeMutex.Unlock()
	if fake.ExecuteStub != nil {
		return fake.ExecuteStub(paths, pairs)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.executeReturns.result1, fake.executeReturns.result2
}

func (fake *TemplateVariablesParser) ExecuteCallCount() int {
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	return len(fake.executeArgsForCall)
}

func (fake *TemplateVariablesParser) ExecuteArgsForCall(i int) ([]string, []string) {
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	return fake.executeArgsForCall[i].paths, fake.executeArgsForCall[i].pairs
}

func (fake *TemplateVariablesParser) ExecuteReturns(result1 map[string]interface{}, result2 error) {
	fake.ExecuteStub = nil
	fake.executeReturns = struct {
		result1 map[string]interface{}
		result2 error
	}{result1, result2}
}

func (fake *TemplateVariablesParser) ExecuteReturnsOnCall(i int, result1 map[string]interface{}, result2 error) {
	fake.ExecuteStub = nil
	if fake.executeReturnsOnCall == nil {
		fake.executeReturnsOnCall = make(map[int]struct {
			result1 map[string]interface{}
			result2 error
		})
	}
	fake.executeReturnsOnCall[i] = struct {
		result1 map[string]interface{}
		result2 error
	}{result1, result2}
}

func (fake *TemplateVariablesParser) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *TemplateVariablesParser) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
