// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/pivotal-cf/kiln/commands"
	"github.com/pivotal-cf/kiln/internal/cargo"
)

type ReleaseMatcher struct {
	GetMatchedReleasesStub        func(cargo.CompiledReleases, cargo.AssetsLock) (map[cargo.CompiledRelease]string, []cargo.CompiledRelease, error)
	getMatchedReleasesMutex       sync.RWMutex
	getMatchedReleasesArgsForCall []struct {
		arg1 cargo.CompiledReleases
		arg2 cargo.AssetsLock
	}
	getMatchedReleasesReturns struct {
		result1 map[cargo.CompiledRelease]string
		result2 []cargo.CompiledRelease
		result3 error
	}
	getMatchedReleasesReturnsOnCall map[int]struct {
		result1 map[cargo.CompiledRelease]string
		result2 []cargo.CompiledRelease
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ReleaseMatcher) GetMatchedReleases(arg1 cargo.CompiledReleases, arg2 cargo.AssetsLock) (map[cargo.CompiledRelease]string, []cargo.CompiledRelease, error) {
	fake.getMatchedReleasesMutex.Lock()
	ret, specificReturn := fake.getMatchedReleasesReturnsOnCall[len(fake.getMatchedReleasesArgsForCall)]
	fake.getMatchedReleasesArgsForCall = append(fake.getMatchedReleasesArgsForCall, struct {
		arg1 cargo.CompiledReleases
		arg2 cargo.AssetsLock
	}{arg1, arg2})
	fake.recordInvocation("GetMatchedReleases", []interface{}{arg1, arg2})
	fake.getMatchedReleasesMutex.Unlock()
	if fake.GetMatchedReleasesStub != nil {
		return fake.GetMatchedReleasesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.getMatchedReleasesReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *ReleaseMatcher) GetMatchedReleasesCallCount() int {
	fake.getMatchedReleasesMutex.RLock()
	defer fake.getMatchedReleasesMutex.RUnlock()
	return len(fake.getMatchedReleasesArgsForCall)
}

func (fake *ReleaseMatcher) GetMatchedReleasesCalls(stub func(cargo.CompiledReleases, cargo.AssetsLock) (map[cargo.CompiledRelease]string, []cargo.CompiledRelease, error)) {
	fake.getMatchedReleasesMutex.Lock()
	defer fake.getMatchedReleasesMutex.Unlock()
	fake.GetMatchedReleasesStub = stub
}

func (fake *ReleaseMatcher) GetMatchedReleasesArgsForCall(i int) (cargo.CompiledReleases, cargo.AssetsLock) {
	fake.getMatchedReleasesMutex.RLock()
	defer fake.getMatchedReleasesMutex.RUnlock()
	argsForCall := fake.getMatchedReleasesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ReleaseMatcher) GetMatchedReleasesReturns(result1 map[cargo.CompiledRelease]string, result2 []cargo.CompiledRelease, result3 error) {
	fake.getMatchedReleasesMutex.Lock()
	defer fake.getMatchedReleasesMutex.Unlock()
	fake.GetMatchedReleasesStub = nil
	fake.getMatchedReleasesReturns = struct {
		result1 map[cargo.CompiledRelease]string
		result2 []cargo.CompiledRelease
		result3 error
	}{result1, result2, result3}
}

func (fake *ReleaseMatcher) GetMatchedReleasesReturnsOnCall(i int, result1 map[cargo.CompiledRelease]string, result2 []cargo.CompiledRelease, result3 error) {
	fake.getMatchedReleasesMutex.Lock()
	defer fake.getMatchedReleasesMutex.Unlock()
	fake.GetMatchedReleasesStub = nil
	if fake.getMatchedReleasesReturnsOnCall == nil {
		fake.getMatchedReleasesReturnsOnCall = make(map[int]struct {
			result1 map[cargo.CompiledRelease]string
			result2 []cargo.CompiledRelease
			result3 error
		})
	}
	fake.getMatchedReleasesReturnsOnCall[i] = struct {
		result1 map[cargo.CompiledRelease]string
		result2 []cargo.CompiledRelease
		result3 error
	}{result1, result2, result3}
}

func (fake *ReleaseMatcher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getMatchedReleasesMutex.RLock()
	defer fake.getMatchedReleasesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ReleaseMatcher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commands.ReleaseMatcher = new(ReleaseMatcher)
