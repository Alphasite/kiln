// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/pivotal-cf/kiln/commands"
	"github.com/pivotal-cf/kiln/internal/cargo"
	billy "gopkg.in/src-d/go-billy.v4"
)

type KilnFileLoader struct {
	LoadKilnfilesStub        func(billy.Filesystem, string, []string, []string) (cargo.Kilnfile, cargo.KilnfileLock, error)
	loadKilnfilesMutex       sync.RWMutex
	loadKilnfilesArgsForCall []struct {
		arg1 billy.Filesystem
		arg2 string
		arg3 []string
		arg4 []string
	}
	loadKilnfilesReturns struct {
		result1 cargo.Kilnfile
		result2 cargo.KilnfileLock
		result3 error
	}
	loadKilnfilesReturnsOnCall map[int]struct {
		result1 cargo.Kilnfile
		result2 cargo.KilnfileLock
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *KilnFileLoader) LoadKilnfiles(arg1 billy.Filesystem, arg2 string, arg3 []string, arg4 []string) (cargo.Kilnfile, cargo.KilnfileLock, error) {
	var arg3Copy []string
	if arg3 != nil {
		arg3Copy = make([]string, len(arg3))
		copy(arg3Copy, arg3)
	}
	var arg4Copy []string
	if arg4 != nil {
		arg4Copy = make([]string, len(arg4))
		copy(arg4Copy, arg4)
	}
	fake.loadKilnfilesMutex.Lock()
	ret, specificReturn := fake.loadKilnfilesReturnsOnCall[len(fake.loadKilnfilesArgsForCall)]
	fake.loadKilnfilesArgsForCall = append(fake.loadKilnfilesArgsForCall, struct {
		arg1 billy.Filesystem
		arg2 string
		arg3 []string
		arg4 []string
	}{arg1, arg2, arg3Copy, arg4Copy})
	fake.recordInvocation("LoadKilnfiles", []interface{}{arg1, arg2, arg3Copy, arg4Copy})
	fake.loadKilnfilesMutex.Unlock()
	if fake.LoadKilnfilesStub != nil {
		return fake.LoadKilnfilesStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.loadKilnfilesReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *KilnFileLoader) LoadKilnfilesCallCount() int {
	fake.loadKilnfilesMutex.RLock()
	defer fake.loadKilnfilesMutex.RUnlock()
	return len(fake.loadKilnfilesArgsForCall)
}

func (fake *KilnFileLoader) LoadKilnfilesCalls(stub func(billy.Filesystem, string, []string, []string) (cargo.Kilnfile, cargo.KilnfileLock, error)) {
	fake.loadKilnfilesMutex.Lock()
	defer fake.loadKilnfilesMutex.Unlock()
	fake.LoadKilnfilesStub = stub
}

func (fake *KilnFileLoader) LoadKilnfilesArgsForCall(i int) (billy.Filesystem, string, []string, []string) {
	fake.loadKilnfilesMutex.RLock()
	defer fake.loadKilnfilesMutex.RUnlock()
	argsForCall := fake.loadKilnfilesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *KilnFileLoader) LoadKilnfilesReturns(result1 cargo.Kilnfile, result2 cargo.KilnfileLock, result3 error) {
	fake.loadKilnfilesMutex.Lock()
	defer fake.loadKilnfilesMutex.Unlock()
	fake.LoadKilnfilesStub = nil
	fake.loadKilnfilesReturns = struct {
		result1 cargo.Kilnfile
		result2 cargo.KilnfileLock
		result3 error
	}{result1, result2, result3}
}

func (fake *KilnFileLoader) LoadKilnfilesReturnsOnCall(i int, result1 cargo.Kilnfile, result2 cargo.KilnfileLock, result3 error) {
	fake.loadKilnfilesMutex.Lock()
	defer fake.loadKilnfilesMutex.Unlock()
	fake.LoadKilnfilesStub = nil
	if fake.loadKilnfilesReturnsOnCall == nil {
		fake.loadKilnfilesReturnsOnCall = make(map[int]struct {
			result1 cargo.Kilnfile
			result2 cargo.KilnfileLock
			result3 error
		})
	}
	fake.loadKilnfilesReturnsOnCall[i] = struct {
		result1 cargo.Kilnfile
		result2 cargo.KilnfileLock
		result3 error
	}{result1, result2, result3}
}

func (fake *KilnFileLoader) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.loadKilnfilesMutex.RLock()
	defer fake.loadKilnfilesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *KilnFileLoader) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commands.KilnFileLoader = new(KilnFileLoader)
