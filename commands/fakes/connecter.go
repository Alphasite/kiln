// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/pivotal-cf/kiln/commands"
	"github.com/pivotal-cf/kiln/internal/cargo"
)

type Connecter struct {
	ConnectStub        func(cargo.CompiledReleases) commands.ReleaseSource
	connectMutex       sync.RWMutex
	connectArgsForCall []struct {
		arg1 cargo.CompiledReleases
	}
	connectReturns struct {
		result1 commands.ReleaseSource
	}
	connectReturnsOnCall map[int]struct {
		result1 commands.ReleaseSource
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Connecter) Connect(arg1 cargo.CompiledReleases) commands.ReleaseSource {
	fake.connectMutex.Lock()
	ret, specificReturn := fake.connectReturnsOnCall[len(fake.connectArgsForCall)]
	fake.connectArgsForCall = append(fake.connectArgsForCall, struct {
		arg1 cargo.CompiledReleases
	}{arg1})
	fake.recordInvocation("Connect", []interface{}{arg1})
	fake.connectMutex.Unlock()
	if fake.ConnectStub != nil {
		return fake.ConnectStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.connectReturns
	return fakeReturns.result1
}

func (fake *Connecter) ConnectCallCount() int {
	fake.connectMutex.RLock()
	defer fake.connectMutex.RUnlock()
	return len(fake.connectArgsForCall)
}

func (fake *Connecter) ConnectCalls(stub func(cargo.CompiledReleases) commands.ReleaseSource) {
	fake.connectMutex.Lock()
	defer fake.connectMutex.Unlock()
	fake.ConnectStub = stub
}

func (fake *Connecter) ConnectArgsForCall(i int) cargo.CompiledReleases {
	fake.connectMutex.RLock()
	defer fake.connectMutex.RUnlock()
	argsForCall := fake.connectArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Connecter) ConnectReturns(result1 commands.ReleaseSource) {
	fake.connectMutex.Lock()
	defer fake.connectMutex.Unlock()
	fake.ConnectStub = nil
	fake.connectReturns = struct {
		result1 commands.ReleaseSource
	}{result1}
}

func (fake *Connecter) ConnectReturnsOnCall(i int, result1 commands.ReleaseSource) {
	fake.connectMutex.Lock()
	defer fake.connectMutex.Unlock()
	fake.ConnectStub = nil
	if fake.connectReturnsOnCall == nil {
		fake.connectReturnsOnCall = make(map[int]struct {
			result1 commands.ReleaseSource
		})
	}
	fake.connectReturnsOnCall[i] = struct {
		result1 commands.ReleaseSource
	}{result1}
}

func (fake *Connecter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.connectMutex.RLock()
	defer fake.connectMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Connecter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commands.Connecter = new(Connecter)
