// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/pivotal-cf/kiln/release"
)

type LocalRelease struct {
	LocalPathStub        func() string
	localPathMutex       sync.RWMutex
	localPathArgsForCall []struct {
	}
	localPathReturns struct {
		result1 string
	}
	localPathReturnsOnCall map[int]struct {
		result1 string
	}
	SatisfiesStub        func(release.ReleaseRequirement) bool
	satisfiesMutex       sync.RWMutex
	satisfiesArgsForCall []struct {
		arg1 release.ReleaseRequirement
	}
	satisfiesReturns struct {
		result1 bool
	}
	satisfiesReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *LocalRelease) LocalPath() string {
	fake.localPathMutex.Lock()
	ret, specificReturn := fake.localPathReturnsOnCall[len(fake.localPathArgsForCall)]
	fake.localPathArgsForCall = append(fake.localPathArgsForCall, struct {
	}{})
	fake.recordInvocation("LocalPath", []interface{}{})
	fake.localPathMutex.Unlock()
	if fake.LocalPathStub != nil {
		return fake.LocalPathStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.localPathReturns
	return fakeReturns.result1
}

func (fake *LocalRelease) LocalPathCallCount() int {
	fake.localPathMutex.RLock()
	defer fake.localPathMutex.RUnlock()
	return len(fake.localPathArgsForCall)
}

func (fake *LocalRelease) LocalPathCalls(stub func() string) {
	fake.localPathMutex.Lock()
	defer fake.localPathMutex.Unlock()
	fake.LocalPathStub = stub
}

func (fake *LocalRelease) LocalPathReturns(result1 string) {
	fake.localPathMutex.Lock()
	defer fake.localPathMutex.Unlock()
	fake.LocalPathStub = nil
	fake.localPathReturns = struct {
		result1 string
	}{result1}
}

func (fake *LocalRelease) LocalPathReturnsOnCall(i int, result1 string) {
	fake.localPathMutex.Lock()
	defer fake.localPathMutex.Unlock()
	fake.LocalPathStub = nil
	if fake.localPathReturnsOnCall == nil {
		fake.localPathReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.localPathReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *LocalRelease) Satisfies(arg1 release.ReleaseRequirement) bool {
	fake.satisfiesMutex.Lock()
	ret, specificReturn := fake.satisfiesReturnsOnCall[len(fake.satisfiesArgsForCall)]
	fake.satisfiesArgsForCall = append(fake.satisfiesArgsForCall, struct {
		arg1 release.ReleaseRequirement
	}{arg1})
	fake.recordInvocation("Satisfies", []interface{}{arg1})
	fake.satisfiesMutex.Unlock()
	if fake.SatisfiesStub != nil {
		return fake.SatisfiesStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.satisfiesReturns
	return fakeReturns.result1
}

func (fake *LocalRelease) SatisfiesCallCount() int {
	fake.satisfiesMutex.RLock()
	defer fake.satisfiesMutex.RUnlock()
	return len(fake.satisfiesArgsForCall)
}

func (fake *LocalRelease) SatisfiesCalls(stub func(release.ReleaseRequirement) bool) {
	fake.satisfiesMutex.Lock()
	defer fake.satisfiesMutex.Unlock()
	fake.SatisfiesStub = stub
}

func (fake *LocalRelease) SatisfiesArgsForCall(i int) release.ReleaseRequirement {
	fake.satisfiesMutex.RLock()
	defer fake.satisfiesMutex.RUnlock()
	argsForCall := fake.satisfiesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *LocalRelease) SatisfiesReturns(result1 bool) {
	fake.satisfiesMutex.Lock()
	defer fake.satisfiesMutex.Unlock()
	fake.SatisfiesStub = nil
	fake.satisfiesReturns = struct {
		result1 bool
	}{result1}
}

func (fake *LocalRelease) SatisfiesReturnsOnCall(i int, result1 bool) {
	fake.satisfiesMutex.Lock()
	defer fake.satisfiesMutex.Unlock()
	fake.SatisfiesStub = nil
	if fake.satisfiesReturnsOnCall == nil {
		fake.satisfiesReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.satisfiesReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *LocalRelease) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.localPathMutex.RLock()
	defer fake.localPathMutex.RUnlock()
	fake.satisfiesMutex.RLock()
	defer fake.satisfiesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *LocalRelease) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ release.LocalRelease = new(LocalRelease)
