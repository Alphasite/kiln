// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/pivotal-cf/kiln/fetcher"
)

type ReleaseInfo struct {
	DownloadStringStub        func() string
	downloadStringMutex       sync.RWMutex
	downloadStringArgsForCall []struct {
	}
	downloadStringReturns struct {
		result1 string
	}
	downloadStringReturnsOnCall map[int]struct {
		result1 string
	}
	SatisfiesStub        func(fetcher.ReleaseRequirement) bool
	satisfiesMutex       sync.RWMutex
	satisfiesArgsForCall []struct {
		arg1 fetcher.ReleaseRequirement
	}
	satisfiesReturns struct {
		result1 bool
	}
	satisfiesReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ReleaseInfo) DownloadString() string {
	fake.downloadStringMutex.Lock()
	ret, specificReturn := fake.downloadStringReturnsOnCall[len(fake.downloadStringArgsForCall)]
	fake.downloadStringArgsForCall = append(fake.downloadStringArgsForCall, struct {
	}{})
	fake.recordInvocation("DownloadString", []interface{}{})
	fake.downloadStringMutex.Unlock()
	if fake.DownloadStringStub != nil {
		return fake.DownloadStringStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.downloadStringReturns
	return fakeReturns.result1
}

func (fake *ReleaseInfo) DownloadStringCallCount() int {
	fake.downloadStringMutex.RLock()
	defer fake.downloadStringMutex.RUnlock()
	return len(fake.downloadStringArgsForCall)
}

func (fake *ReleaseInfo) DownloadStringCalls(stub func() string) {
	fake.downloadStringMutex.Lock()
	defer fake.downloadStringMutex.Unlock()
	fake.DownloadStringStub = stub
}

func (fake *ReleaseInfo) DownloadStringReturns(result1 string) {
	fake.downloadStringMutex.Lock()
	defer fake.downloadStringMutex.Unlock()
	fake.DownloadStringStub = nil
	fake.downloadStringReturns = struct {
		result1 string
	}{result1}
}

func (fake *ReleaseInfo) DownloadStringReturnsOnCall(i int, result1 string) {
	fake.downloadStringMutex.Lock()
	defer fake.downloadStringMutex.Unlock()
	fake.DownloadStringStub = nil
	if fake.downloadStringReturnsOnCall == nil {
		fake.downloadStringReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.downloadStringReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *ReleaseInfo) Satisfies(arg1 fetcher.ReleaseRequirement) bool {
	fake.satisfiesMutex.Lock()
	ret, specificReturn := fake.satisfiesReturnsOnCall[len(fake.satisfiesArgsForCall)]
	fake.satisfiesArgsForCall = append(fake.satisfiesArgsForCall, struct {
		arg1 fetcher.ReleaseRequirement
	}{arg1})
	fake.recordInvocation("Satisfies", []interface{}{arg1})
	fake.satisfiesMutex.Unlock()
	if fake.SatisfiesStub != nil {
		return fake.SatisfiesStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.satisfiesReturns
	return fakeReturns.result1
}

func (fake *ReleaseInfo) SatisfiesCallCount() int {
	fake.satisfiesMutex.RLock()
	defer fake.satisfiesMutex.RUnlock()
	return len(fake.satisfiesArgsForCall)
}

func (fake *ReleaseInfo) SatisfiesCalls(stub func(fetcher.ReleaseRequirement) bool) {
	fake.satisfiesMutex.Lock()
	defer fake.satisfiesMutex.Unlock()
	fake.SatisfiesStub = stub
}

func (fake *ReleaseInfo) SatisfiesArgsForCall(i int) fetcher.ReleaseRequirement {
	fake.satisfiesMutex.RLock()
	defer fake.satisfiesMutex.RUnlock()
	argsForCall := fake.satisfiesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ReleaseInfo) SatisfiesReturns(result1 bool) {
	fake.satisfiesMutex.Lock()
	defer fake.satisfiesMutex.Unlock()
	fake.SatisfiesStub = nil
	fake.satisfiesReturns = struct {
		result1 bool
	}{result1}
}

func (fake *ReleaseInfo) SatisfiesReturnsOnCall(i int, result1 bool) {
	fake.satisfiesMutex.Lock()
	defer fake.satisfiesMutex.Unlock()
	fake.SatisfiesStub = nil
	if fake.satisfiesReturnsOnCall == nil {
		fake.satisfiesReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.satisfiesReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *ReleaseInfo) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.downloadStringMutex.RLock()
	defer fake.downloadStringMutex.RUnlock()
	fake.satisfiesMutex.RLock()
	defer fake.satisfiesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ReleaseInfo) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ fetcher.ReleaseInfo = new(ReleaseInfo)
