// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/aws/aws-sdk-go/service/s3"
	"github.com/pivotal-cf/kiln/fetcher"
)

type S3HeadObjecter struct {
	HeadObjectStub        func(*s3.HeadObjectInput) (*s3.HeadObjectOutput, error)
	headObjectMutex       sync.RWMutex
	headObjectArgsForCall []struct {
		arg1 *s3.HeadObjectInput
	}
	headObjectReturns struct {
		result1 *s3.HeadObjectOutput
		result2 error
	}
	headObjectReturnsOnCall map[int]struct {
		result1 *s3.HeadObjectOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *S3HeadObjecter) HeadObject(arg1 *s3.HeadObjectInput) (*s3.HeadObjectOutput, error) {
	fake.headObjectMutex.Lock()
	ret, specificReturn := fake.headObjectReturnsOnCall[len(fake.headObjectArgsForCall)]
	fake.headObjectArgsForCall = append(fake.headObjectArgsForCall, struct {
		arg1 *s3.HeadObjectInput
	}{arg1})
	fake.recordInvocation("HeadObject", []interface{}{arg1})
	fake.headObjectMutex.Unlock()
	if fake.HeadObjectStub != nil {
		return fake.HeadObjectStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.headObjectReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *S3HeadObjecter) HeadObjectCallCount() int {
	fake.headObjectMutex.RLock()
	defer fake.headObjectMutex.RUnlock()
	return len(fake.headObjectArgsForCall)
}

func (fake *S3HeadObjecter) HeadObjectCalls(stub func(*s3.HeadObjectInput) (*s3.HeadObjectOutput, error)) {
	fake.headObjectMutex.Lock()
	defer fake.headObjectMutex.Unlock()
	fake.HeadObjectStub = stub
}

func (fake *S3HeadObjecter) HeadObjectArgsForCall(i int) *s3.HeadObjectInput {
	fake.headObjectMutex.RLock()
	defer fake.headObjectMutex.RUnlock()
	argsForCall := fake.headObjectArgsForCall[i]
	return argsForCall.arg1
}

func (fake *S3HeadObjecter) HeadObjectReturns(result1 *s3.HeadObjectOutput, result2 error) {
	fake.headObjectMutex.Lock()
	defer fake.headObjectMutex.Unlock()
	fake.HeadObjectStub = nil
	fake.headObjectReturns = struct {
		result1 *s3.HeadObjectOutput
		result2 error
	}{result1, result2}
}

func (fake *S3HeadObjecter) HeadObjectReturnsOnCall(i int, result1 *s3.HeadObjectOutput, result2 error) {
	fake.headObjectMutex.Lock()
	defer fake.headObjectMutex.Unlock()
	fake.HeadObjectStub = nil
	if fake.headObjectReturnsOnCall == nil {
		fake.headObjectReturnsOnCall = make(map[int]struct {
			result1 *s3.HeadObjectOutput
			result2 error
		})
	}
	fake.headObjectReturnsOnCall[i] = struct {
		result1 *s3.HeadObjectOutput
		result2 error
	}{result1, result2}
}

func (fake *S3HeadObjecter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.headObjectMutex.RLock()
	defer fake.headObjectMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *S3HeadObjecter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ fetcher.S3HeadObjecter = new(S3HeadObjecter)
