// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/pivotal-cf/kiln/fetcher"
)

type ReleaseSourceRepo struct {
	FindReleaseUploaderStub        func(string) (fetcher.ReleaseUploader, error)
	findReleaseUploaderMutex       sync.RWMutex
	findReleaseUploaderArgsForCall []struct {
		arg1 string
	}
	findReleaseUploaderReturns struct {
		result1 fetcher.ReleaseUploader
		result2 error
	}
	findReleaseUploaderReturnsOnCall map[int]struct {
		result1 fetcher.ReleaseUploader
		result2 error
	}
	FindRemotePatherStub        func(string) (fetcher.RemotePather, error)
	findRemotePatherMutex       sync.RWMutex
	findRemotePatherArgsForCall []struct {
		arg1 string
	}
	findRemotePatherReturns struct {
		result1 fetcher.RemotePather
		result2 error
	}
	findRemotePatherReturnsOnCall map[int]struct {
		result1 fetcher.RemotePather
		result2 error
	}
	MultiReleaseSourceStub        func(bool) fetcher.MultiReleaseSource
	multiReleaseSourceMutex       sync.RWMutex
	multiReleaseSourceArgsForCall []struct {
		arg1 bool
	}
	multiReleaseSourceReturns struct {
		result1 fetcher.MultiReleaseSource
	}
	multiReleaseSourceReturnsOnCall map[int]struct {
		result1 fetcher.MultiReleaseSource
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ReleaseSourceRepo) FindReleaseUploader(arg1 string) (fetcher.ReleaseUploader, error) {
	fake.findReleaseUploaderMutex.Lock()
	ret, specificReturn := fake.findReleaseUploaderReturnsOnCall[len(fake.findReleaseUploaderArgsForCall)]
	fake.findReleaseUploaderArgsForCall = append(fake.findReleaseUploaderArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("FindReleaseUploader", []interface{}{arg1})
	fake.findReleaseUploaderMutex.Unlock()
	if fake.FindReleaseUploaderStub != nil {
		return fake.FindReleaseUploaderStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.findReleaseUploaderReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ReleaseSourceRepo) FindReleaseUploaderCallCount() int {
	fake.findReleaseUploaderMutex.RLock()
	defer fake.findReleaseUploaderMutex.RUnlock()
	return len(fake.findReleaseUploaderArgsForCall)
}

func (fake *ReleaseSourceRepo) FindReleaseUploaderCalls(stub func(string) (fetcher.ReleaseUploader, error)) {
	fake.findReleaseUploaderMutex.Lock()
	defer fake.findReleaseUploaderMutex.Unlock()
	fake.FindReleaseUploaderStub = stub
}

func (fake *ReleaseSourceRepo) FindReleaseUploaderArgsForCall(i int) string {
	fake.findReleaseUploaderMutex.RLock()
	defer fake.findReleaseUploaderMutex.RUnlock()
	argsForCall := fake.findReleaseUploaderArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ReleaseSourceRepo) FindReleaseUploaderReturns(result1 fetcher.ReleaseUploader, result2 error) {
	fake.findReleaseUploaderMutex.Lock()
	defer fake.findReleaseUploaderMutex.Unlock()
	fake.FindReleaseUploaderStub = nil
	fake.findReleaseUploaderReturns = struct {
		result1 fetcher.ReleaseUploader
		result2 error
	}{result1, result2}
}

func (fake *ReleaseSourceRepo) FindReleaseUploaderReturnsOnCall(i int, result1 fetcher.ReleaseUploader, result2 error) {
	fake.findReleaseUploaderMutex.Lock()
	defer fake.findReleaseUploaderMutex.Unlock()
	fake.FindReleaseUploaderStub = nil
	if fake.findReleaseUploaderReturnsOnCall == nil {
		fake.findReleaseUploaderReturnsOnCall = make(map[int]struct {
			result1 fetcher.ReleaseUploader
			result2 error
		})
	}
	fake.findReleaseUploaderReturnsOnCall[i] = struct {
		result1 fetcher.ReleaseUploader
		result2 error
	}{result1, result2}
}

func (fake *ReleaseSourceRepo) FindRemotePather(arg1 string) (fetcher.RemotePather, error) {
	fake.findRemotePatherMutex.Lock()
	ret, specificReturn := fake.findRemotePatherReturnsOnCall[len(fake.findRemotePatherArgsForCall)]
	fake.findRemotePatherArgsForCall = append(fake.findRemotePatherArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("FindRemotePather", []interface{}{arg1})
	fake.findRemotePatherMutex.Unlock()
	if fake.FindRemotePatherStub != nil {
		return fake.FindRemotePatherStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.findRemotePatherReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ReleaseSourceRepo) FindRemotePatherCallCount() int {
	fake.findRemotePatherMutex.RLock()
	defer fake.findRemotePatherMutex.RUnlock()
	return len(fake.findRemotePatherArgsForCall)
}

func (fake *ReleaseSourceRepo) FindRemotePatherCalls(stub func(string) (fetcher.RemotePather, error)) {
	fake.findRemotePatherMutex.Lock()
	defer fake.findRemotePatherMutex.Unlock()
	fake.FindRemotePatherStub = stub
}

func (fake *ReleaseSourceRepo) FindRemotePatherArgsForCall(i int) string {
	fake.findRemotePatherMutex.RLock()
	defer fake.findRemotePatherMutex.RUnlock()
	argsForCall := fake.findRemotePatherArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ReleaseSourceRepo) FindRemotePatherReturns(result1 fetcher.RemotePather, result2 error) {
	fake.findRemotePatherMutex.Lock()
	defer fake.findRemotePatherMutex.Unlock()
	fake.FindRemotePatherStub = nil
	fake.findRemotePatherReturns = struct {
		result1 fetcher.RemotePather
		result2 error
	}{result1, result2}
}

func (fake *ReleaseSourceRepo) FindRemotePatherReturnsOnCall(i int, result1 fetcher.RemotePather, result2 error) {
	fake.findRemotePatherMutex.Lock()
	defer fake.findRemotePatherMutex.Unlock()
	fake.FindRemotePatherStub = nil
	if fake.findRemotePatherReturnsOnCall == nil {
		fake.findRemotePatherReturnsOnCall = make(map[int]struct {
			result1 fetcher.RemotePather
			result2 error
		})
	}
	fake.findRemotePatherReturnsOnCall[i] = struct {
		result1 fetcher.RemotePather
		result2 error
	}{result1, result2}
}

func (fake *ReleaseSourceRepo) MultiReleaseSource(arg1 bool) fetcher.MultiReleaseSource {
	fake.multiReleaseSourceMutex.Lock()
	ret, specificReturn := fake.multiReleaseSourceReturnsOnCall[len(fake.multiReleaseSourceArgsForCall)]
	fake.multiReleaseSourceArgsForCall = append(fake.multiReleaseSourceArgsForCall, struct {
		arg1 bool
	}{arg1})
	fake.recordInvocation("MultiReleaseSource", []interface{}{arg1})
	fake.multiReleaseSourceMutex.Unlock()
	if fake.MultiReleaseSourceStub != nil {
		return fake.MultiReleaseSourceStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.multiReleaseSourceReturns
	return fakeReturns.result1
}

func (fake *ReleaseSourceRepo) MultiReleaseSourceCallCount() int {
	fake.multiReleaseSourceMutex.RLock()
	defer fake.multiReleaseSourceMutex.RUnlock()
	return len(fake.multiReleaseSourceArgsForCall)
}

func (fake *ReleaseSourceRepo) MultiReleaseSourceCalls(stub func(bool) fetcher.MultiReleaseSource) {
	fake.multiReleaseSourceMutex.Lock()
	defer fake.multiReleaseSourceMutex.Unlock()
	fake.MultiReleaseSourceStub = stub
}

func (fake *ReleaseSourceRepo) MultiReleaseSourceArgsForCall(i int) bool {
	fake.multiReleaseSourceMutex.RLock()
	defer fake.multiReleaseSourceMutex.RUnlock()
	argsForCall := fake.multiReleaseSourceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ReleaseSourceRepo) MultiReleaseSourceReturns(result1 fetcher.MultiReleaseSource) {
	fake.multiReleaseSourceMutex.Lock()
	defer fake.multiReleaseSourceMutex.Unlock()
	fake.MultiReleaseSourceStub = nil
	fake.multiReleaseSourceReturns = struct {
		result1 fetcher.MultiReleaseSource
	}{result1}
}

func (fake *ReleaseSourceRepo) MultiReleaseSourceReturnsOnCall(i int, result1 fetcher.MultiReleaseSource) {
	fake.multiReleaseSourceMutex.Lock()
	defer fake.multiReleaseSourceMutex.Unlock()
	fake.MultiReleaseSourceStub = nil
	if fake.multiReleaseSourceReturnsOnCall == nil {
		fake.multiReleaseSourceReturnsOnCall = make(map[int]struct {
			result1 fetcher.MultiReleaseSource
		})
	}
	fake.multiReleaseSourceReturnsOnCall[i] = struct {
		result1 fetcher.MultiReleaseSource
	}{result1}
}

func (fake *ReleaseSourceRepo) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findReleaseUploaderMutex.RLock()
	defer fake.findReleaseUploaderMutex.RUnlock()
	fake.findRemotePatherMutex.RLock()
	defer fake.findRemotePatherMutex.RUnlock()
	fake.multiReleaseSourceMutex.RLock()
	defer fake.multiReleaseSourceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ReleaseSourceRepo) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ fetcher.ReleaseSourceRepo = new(ReleaseSourceRepo)
